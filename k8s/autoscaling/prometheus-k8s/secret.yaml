apiVersion: v1
data:
  configmaps.json: eyJpdGVtcyI6bnVsbH0=
  prometheus.yaml: 
kind: Secret
metadata:
  annotations:
    generated: "true"
  labels:
    managed-by: prometheus-operator
  name: prometheus-sample-metrics-prom
  namespace: default
type: Opaque
